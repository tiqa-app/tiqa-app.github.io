{"pageProps":{"activeTab":"junior","back":"/topics","questions":[{"slug":"what-is-angular-framework","title":"What is Angular Framework?","answer":"<p>Angular is a <strong>TypeScript-based open-source</strong> front-end platform that makes it easy to build applications with in web/mobile/desktop. The major features of this framework such as declarative templates, dependency injection, end to end tooling, and many more other features are used to ease the development.</p>\n","level":1},{"slug":"what-is-the-difference-between-angularjs-and-angular","title":"What is the difference between AngularJS and Angular?","answer":"<p>Angular is a completely revived component-based framework in which an application is a tree of individual components.</p>\n<p>Some of the major difference in tabular form</p>\n<table>\n<thead>\n<tr>\n<th>AngularJS</th>\n<th>Angular</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>It is based on MVC architecture</td>\n<td>This is based on Service/Controller</td>\n</tr>\n<tr>\n<td>This uses use JavaScript to build the application</td>\n<td>Introduced the typescript to write the application</td>\n</tr>\n<tr>\n<td>Based on controllers concept</td>\n<td>This is a component based UI approach</td>\n</tr>\n<tr>\n<td>Not a mobile friendly framework</td>\n<td>Developed considering mobile platform</td>\n</tr>\n<tr>\n<td>Difficulty in SEO friendly application development</td>\n<td>Ease to create SEO friendly applications</td>\n</tr>\n</tbody></table>\n","level":1},{"slug":"what-is-typescript","title":"What is TypeScript?","answer":"<p>TypeScript is a typed superset of JavaScript created by Microsoft that adds optional types, classes, async/await, and many other features, and compiles to plain JavaScript. Angular built entirely in TypeScript and used as a primary language.\nYou can install it globally as</p>\n<pre><code class=\"language-cmd\">npm install -g typescript</code></pre>\n<p>Let&#39;s see a simple example of TypeScript usage,</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">greeter</span>(<span class=\"hljs-params\">person: <span class=\"hljs-built_in\">string</span></span>) </span>{\n<span class=\"hljs-keyword\">  return</span> <span class=\"hljs-string\">&quot;Hello, &quot;</span> + person;\n}\n<span class=\"hljs-keyword\">let</span> user = <span class=\"hljs-string\">&quot;Sudheer&quot;</span>;\n<span class=\"hljs-built_in\">document</span>.body.innerHTML = greeter(user);</code></pre>\n<p>The greeter method allows only string type as argument.</p>\n","level":1},{"slug":"what-are-the-key-components-of-angular","title":"What are the key components of Angular?","answer":"<p>Angular has the below key components,</p>\n<ol>\n<li><strong>Component:</strong> These are the basic building blocks of angular application to control HTML views.</li>\n<li><strong>Modules:</strong> An angular module is set of angular basic building blocks like component, directives, services etc. An application is divided into logical pieces and each piece of code is called as &quot;module&quot; which perform a single task.</li>\n<li><strong>Templates:</strong> This represent the views of an Angular application.</li>\n<li><strong>Services:</strong> It is used to create components which can be shared across the entire application.</li>\n<li><strong>Metadata:</strong> This can be used to add more data to an Angular class.</li>\n</ol>\n","level":1},{"slug":"what-are-directives","title":"What are directives?","answer":"<p>Directives add behaviour to an existing DOM element or an existing component instance.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">import</span> { Directive, ElementRef, Input } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n<span class=\"hljs-meta\">@Directive</span>({ <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">&#x27;[myHighlight]&#x27;</span> })\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HighlightDirective</span> </span>{\n<span class=\"hljs-function\"><span class=\"hljs-title\">  constructor</span>(<span class=\"hljs-params\">el: ElementRef</span>)</span> {\n    el.nativeElement.style.backgroundColor = <span class=\"hljs-string\">&#x27;yellow&#x27;</span>;\n  }\n}</code></pre>\n<p>Now this directive extends HTML element behavior with a yellow background as below</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">myHighlight</span>&gt;</span>Highlight me!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></code></pre>\n","level":1},{"slug":"what-are-components","title":"What are components?","answer":"<p>Components are the most basic UI building block of an Angular app which formed a tree of Angular components. These components are subset of directives. Unlike directives, components always have a template and only one component can be instantiated per an element in a template.\nLet&#39;s see a simple example of Angular component</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">import</span> { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n<span class=\"hljs-meta\">@Component</span> ({\n<span class=\"hljs-attr\">  selector</span>: <span class=\"hljs-string\">&#x27;my-app&#x27;</span>,\n<span class=\"hljs-attr\">  template</span>: <span class=\"hljs-string\">` &lt;div&gt;\n    &lt;h1&gt;{{title}}&lt;/h1&gt;\n    &lt;div&gt;Learn Angular6 with examples&lt;/div&gt;\n  &lt;/div&gt; `</span>,\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppComponent</span> </span>{\n<span class=\"hljs-attr\">  title</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&#x27;Welcome to Angular world&#x27;</span>;\n}</code></pre>\n","level":1},{"slug":"what-are-the-differences-between-component-and-directive","title":"What are the differences between Component and Directive?","answer":"<p>In a short note, A component(@component) is a directive-with-a-template.</p>\n<p>Some of the major differences are mentioned in a tabular form</p>\n<table>\n<thead>\n<tr>\n<th>Component</th>\n<th>Directive</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>To register a component we use @Component meta-data annotation</td>\n<td>To register directives we use @Directive meta-data annotation</td>\n</tr>\n<tr>\n<td>Components are typically used to create UI widgets</td>\n<td>Directive is used to add behavior to an existing DOM element</td>\n</tr>\n<tr>\n<td>Component is used to break up the application into smaller components</td>\n<td>Directive is use to design re-usable components</td>\n</tr>\n<tr>\n<td>Only one component can be present per DOM element</td>\n<td>Many directives can be used per DOM element</td>\n</tr>\n<tr>\n<td>@View decorator or templateurl/template are mandatory</td>\n<td>Directive doesn&#39;t use View</td>\n</tr>\n</tbody></table>","level":1},{"slug":"what-is-a-template","title":"What is a template?","answer":"<p>A template is a HTML view where you can display data by binding controls to properties of an Angular component. You can store your component&#39;s template in one of two places. You can define it inline using the template property, or you can define the template in a separate HTML file and link to it in the component metadata using the @Component decorator&#39;s templateUrl property.</p>\n<p><strong>Using inline template with template syntax,</strong></p>\n<pre><code class=\"language-typescript\">import { Component } from &#x27;@angular/core&#x27;;\n\n@Component ({\n    selector: &#x27;my-app&#x27;,\n    template: &#x27;\n      &lt;div&gt;\n          &lt;h1&gt;{{title}}&lt;/h1&gt;\n          &lt;div&gt;Learn Angular&lt;/div&gt;\n      &lt;/div&gt;\n    &#x27;\n})\n\nexport class AppComponent {\n    title: string = &#x27;Hello World&#x27;;\n}</code></pre>\n<p><strong>Using separate template file such as app.component.html</strong></p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">import</span> { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@angular/core&quot;</span>;\n\n<span class=\"hljs-meta\">@Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">&quot;my-app&quot;</span>,\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">&quot;app/app.component.html&quot;</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppComponent</span> </span>{\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&quot;Hello World&quot;</span>;\n}</code></pre>","level":1},{"slug":"what-is-a-module","title":"What is a module?","answer":"<p>Modules are logical boundaries in your application and the application is divided into separate modules to separate the functionality of your application.\nLets take an example of <strong>app.module.ts</strong> root module declared with <strong>@NgModule</strong> decorator as below,</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">import</span> { NgModule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@angular/core&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { BrowserModule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@angular/platform-browser&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { AppComponent } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./app.component&quot;</span>;\n\n<span class=\"hljs-meta\">@NgModule</span>({\n  <span class=\"hljs-attr\">imports</span>: [BrowserModule],\n  <span class=\"hljs-attr\">declarations</span>: [AppComponent],\n  <span class=\"hljs-attr\">bootstrap</span>: [AppComponent],\n  <span class=\"hljs-attr\">providers</span>: []\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppModule</span> </span>{}</code></pre>\n<p>The NgModule decorator has five important(among all) options</p>\n<ol>\n<li>The imports option is used to import other dependent modules. The BrowserModule is required by default for any web based angular application</li>\n<li>The declarations option is used to define components in the respective module</li>\n<li>The bootstrap option tells Angular which Component to bootstrap in the application</li>\n<li>The providers option is used to configure set of injectable objects that are available in the injector of this module.</li>\n<li>The entryComponents option is a set of components dynamically loaded into the view.</li></ol>","level":1},{"slug":"what-are-lifecycle-hooks-available","title":"What are lifecycle hooks available?","answer":"<p>Angular application goes through an entire set of processes or has a lifecycle right from its initiation to the end of the application.\nThe description of each lifecycle method is as below,</p>\n<ol>\n<li><strong>ngOnChanges:</strong> When the value of a data bound property changes, then this method is called.</li>\n<li><strong>ngOnInit:</strong> This is called whenever the initialization of the directive/component after Angular first displays the data-bound properties happens.</li>\n<li><strong>ngDoCheck:</strong> This is for the detection and to act on changes that Angular can&#39;t or won&#39;t detect on its own.</li>\n<li><strong>ngAfterContentInit:</strong> This is called in response after Angular projects external content into the component&#39;s view.</li>\n<li><strong>ngAfterContentChecked:</strong> This is called in response after Angular checks the content projected into the component.</li>\n<li><strong>ngAfterViewInit:</strong> This is called in response after Angular initializes the component&#39;s views and child views.</li>\n<li><strong>ngAfterViewChecked:</strong> This is called in response after Angular checks the component&#39;s views and child views.</li>\n<li><strong>ngOnDestroy:</strong> This is the cleanup phase just before Angular destroys the directive/component.</li>\n</ol>\n","level":1},{"slug":"what-is-a-data-binding","title":"What is a data binding?","answer":"<p>Data binding is a core concept in Angular and allows to define communication between a component and the DOM, making it very easy to define interactive applications without worrying about pushing and pulling data. There are four forms of data binding(divided as 3 categories) which differ in the way the data is flowing.</p>\n<ol>\n<li><strong>From the Component to the DOM:</strong></li>\n</ol>\n<p><strong>Interpolation:</strong> {{ value }}: Adds the value of a property from the component</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>Name: {{ user.name }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>Address: {{ user.address }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></code></pre>\n<p><strong>Property binding:</strong> [property]=”value”: The value is passed from the component to the specified property or simple HTML attribute</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span> [<span class=\"hljs-attr\">value</span>]=<span class=\"hljs-string\">&quot;user.email&quot;</span>&gt;</span></code></pre>\n<ol start=\"2\">\n<li><strong>From the DOM to the Component:</strong></li>\n</ol>\n<p><strong>Event binding: (event)=”function”:</strong> When a specific DOM event happens (eg.: click, change, keyup), call the specified method in the component</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">&quot;logout()&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></code></pre>\n<ol start=\"3\">\n<li><strong>Two-way binding:</strong></li>\n</ol>\n<p><strong>Two-way data binding:</strong> [(ngModel)]=”value”: Two-way data binding allows to have the data flow both ways. For example, in the below code snippet, both the email DOM input and component email property are in sync</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span> [(<span class=\"hljs-attr\">ngModel</span>)]=<span class=\"hljs-string\">&quot;user.email&quot;</span>&gt;</span></code></pre>\n","level":1},{"slug":"what-is-metadata","title":"What is metadata?","answer":"<p>Metadata is used to decorate a class so that it can configure the expected behavior of the class. The metadata is represented by decorators</p>\n<ol>\n<li><p><strong>Class decorators</strong>, e.g. @Component and @NgModule</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">import</span> { NgModule, Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@angular/core&quot;</span>;\n\n<span class=\"hljs-meta\">@Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">&quot;my-component&quot;</span>,\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&quot;&lt;div&gt;Class decorator&lt;/div&gt;&quot;</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyComponent</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Hey I am a component!&quot;</span>);\n  }\n}\n\n<span class=\"hljs-meta\">@NgModule</span>({\n  <span class=\"hljs-attr\">imports</span>: [],\n  <span class=\"hljs-attr\">declarations</span>: []\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyModule</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Hey I am a module!&quot;</span>);\n  }\n}</code></pre>\n</li>\n<li><p><strong>Property decorators</strong> Used for properties inside classes, e.g. @Input and @Output</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">import</span> { Component, Input } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@angular/core&quot;</span>;\n\n<span class=\"hljs-meta\">@Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">&quot;my-component&quot;</span>,\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&quot;&lt;div&gt;Property decorator&lt;/div&gt;&quot;</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyComponent</span> </span>{\n  <span class=\"hljs-meta\">@Input</span>()\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">string</span>;\n}</code></pre>\n</li>\n<li><p><strong>Method decorators</strong> Used for methods inside classes, e.g. @HostListener</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">import</span> { Component, HostListener } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@angular/core&quot;</span>;\n\n<span class=\"hljs-meta\">@Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">&quot;my-component&quot;</span>,\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&quot;&lt;div&gt;Method decorator&lt;/div&gt;&quot;</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyComponent</span> </span>{\n  <span class=\"hljs-meta\">@HostListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, [<span class=\"hljs-string\">&quot;$event&quot;</span>])\n  <span class=\"hljs-function\"><span class=\"hljs-title\">onHostClick</span>(<span class=\"hljs-params\">event: Event</span>)</span> {\n    <span class=\"hljs-comment\">// clicked, `event` available</span>\n  }\n}</code></pre>\n</li>\n<li><p><strong>Parameter decorators</strong> Used for parameters inside class constructors, e.g. @Inject, Optional</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">import</span> { Component, Inject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@angular/core&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { MyService } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./my-service&quot;</span>;\n\n<span class=\"hljs-meta\">@Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">&quot;my-component&quot;</span>,\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&quot;&lt;div&gt;Parameter decorator&lt;/div&gt;&quot;</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyComponent</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-meta\">@Inject</span>(MyService) myService</span>)</span> {\n    <span class=\"hljs-built_in\">console</span>.log(myService); <span class=\"hljs-comment\">// MyService</span>\n  }\n}</code></pre></li></ol>","level":1},{"slug":"what-is-angular-cli","title":"What is Angular CLI?","answer":"<p>  In Angular8, the CLI Builder API is stable and available to developers who want to customize the <code>Angular CLI</code> by adding or modifying commands. For example, you could supply a builder to perform an entirely new task, or to change which third-party tool is used by an existing command.</p>\n","level":1},{"slug":"what-is-the-difference-between-constructor-and-ngoninit","title":"What is the difference between constructor and ngOnInit?","answer":"<p>TypeScript classes has a default method called constructor which is normally used for the initialization purpose. Whereas ngOnInit method is specific to Angular, especially used to define Angular bindings. Even though constructor getting called first, it is preferred to move all of your Angular bindings to ngOnInit method.\nIn order to use ngOnInit, you need to implement OnInit interface as below,</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">OnInit</span></span>{\n<span class=\"hljs-function\"><span class=\"hljs-title\">  constructor</span>(<span class=\"hljs-params\"></span>)</span>{\n<span class=\"hljs-comment\">    //called first time before the ngOnInit()</span>\n  }\n<span class=\"hljs-function\"><span class=\"hljs-title\">  ngOnInit</span>(<span class=\"hljs-params\"></span>)</span>{\n<span class=\"hljs-comment\">    //called after the constructor and called  after the first ngOnChanges()</span>\n  }\n}</code></pre>\n","level":1},{"slug":"what-is-a-service","title":"What is a service","answer":"<p>A service is used when a common functionality needs to be provided to various modules. Services allow for greater separation of concerns for your application and better modularity by allowing you to extract common functionality out of components.</p>\n<p>Let&#39;s create a repoService which can be used across components,</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">import</span> { Injectable } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@angular/core&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { Http } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@angular/http&quot;</span>;\n\n<span class=\"hljs-meta\">@Injectable</span>({\n  <span class=\"hljs-comment\">// The Injectable decorator is required for dependency injection to work</span>\n  <span class=\"hljs-comment\">// providedIn option registers the service with a specific NgModule</span>\n  providedIn: <span class=\"hljs-string\">&quot;root&quot;</span> <span class=\"hljs-comment\">// This declares the service with the root app (AppModule)</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RepoService</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> http: Http</span>)</span> {}\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">fetchAll</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.http.get(<span class=\"hljs-string\">&quot;https://api.github.com/repositories&quot;</span>);\n  }\n}</code></pre>\n<p>The above service uses Http service as a dependency.</p>","level":1},{"slug":"what-is-dependency-injection-in-angular","title":"What is dependency injection in Angular?","answer":"<p>Dependency injection (DI), is an important application design pattern in which a class asks for dependencies from external sources rather than creating them itself. Angular comes with its own dependency injection framework for resolving dependencies( services or objects that a class needs to perform its function).So you can have your services depend on other services throughout your application.</p>\n","level":1},{"slug":"what-is-the-purpose-of-async-pipe","title":"What is the purpose of async pipe?","answer":"<p>The AsyncPipe subscribes to an observable or promise and returns the latest value it has emitted. When a new value is emitted, the pipe marks the component to be checked for changes.</p>\n<p>Let&#39;s take a time observable which continuously updates the view for every 2 seconds with the current time.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-meta\">@Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">&quot;async-observable-pipe&quot;</span>,\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;div&gt;&lt;code&gt;observable|async&lt;/code&gt;: Time: {{ time | async }}&lt;/div&gt;`</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AsyncObservablePipeComponent</span> </span>{\n  time = <span class=\"hljs-keyword\">new</span> Observable(<span class=\"hljs-function\">(<span class=\"hljs-params\">observer</span>) =&gt;</span>\n    <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =&gt;</span> observer.next(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().toString()), <span class=\"hljs-number\">2000</span>)\n  );\n}</code></pre>","level":1},{"slug":"what-is-the-option-to-choose-between-inline-and-external-template-file","title":"What is the option to choose between inline and external template file?","answer":"<p>You can store your component&#39;s template in one of two places. You can define it inline using the <strong>template</strong> property, or you can define the template in a separate HTML file and link to it in the component metadata using the <strong>@Component</strong> decorator&#39;s <strong>templateUrl</strong> property.\nThe choice between inline and separate HTML is a matter of taste, circumstances, and organization policy. But normally we use inline template for small portion of code and external template file for bigger views. By default, the Angular CLI generates components with a template file. But you can override that with the below command,</p>\n<pre><code>ng generate component hero -it</code></pre>\n","level":1},{"slug":"what-is-the-purpose-of-ngfor-directive","title":"What is the purpose of *ngFor directive?","answer":"<p>We use Angular ngFor directive in the template to display each item in the list. For example, here we iterate over list of users,</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> *<span class=\"hljs-attr\">ngFor</span>=<span class=\"hljs-string\">&quot;let user of users&quot;</span>&gt;</span>\n{{ user }}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></code></pre>\n<p>The user variable in the ngFor double-quoted instruction is a <strong>template input variable</strong></p>\n","level":1},{"slug":"what-is-the-purpose-of-ngif-directive","title":"What is the purpose of ngIf directive?","answer":"<p>Sometimes an app needs to display a view or a portion of a view only under specific circumstances. The Angular ngIf directive inserts or removes an element based on a truthy/falsy condition. Let&#39;s take an example to display a message if the user age is more than 18,</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">&quot;user.age &gt; 18&quot;</span>&gt;</span>You are not eligible for student pass!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></code></pre>\n<p><strong>Note:</strong> Angular isn&#39;t showing and hiding the message. It is adding and removing the paragraph element from the DOM. That improves performance, especially in the larger projects with many data bindings.</p>\n","level":1},{"slug":"what-happens-if-you-use-script-tag-inside-template","title":"What happens if you use script tag inside template?","answer":"<p>Angular recognizes the value as unsafe and automatically sanitizes it, which removes the <strong>script</strong> tag but keeps safe content such as the text content of the script tag. This way it eliminates the risk of script injection attacks. If you still use it then it will be ignored and a warning appears in the browser console.\nLet's take an example of innerHtml property binding which causes XSS vulnerability,</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">InnerHtmlBindingComponent</span> </span>{\n<span class=\"hljs-comment\">// For example, a user/attacker-controlled value from a URL.</span>\nhtmlSnippet = <span class=\"hljs-string\">&#x27;Template &lt;script&gt;alert(&quot;0wned&quot;)&lt;/script&gt; &lt;b&gt;Syntax&lt;/b&gt;&#x27;</span>;\n}</code></pre>\n","level":1},{"slug":"what-is-interpolation","title":"What is interpolation?","answer":"<p>Interpolation is a special syntax that Angular converts into property binding. It’s a convenient alternative to property binding. It is represented by double curly braces({{}}). The text between the braces is often the name of a component property. Angular replaces that name with the string value of the corresponding component property.\nLet&#39;s take an example,</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>\n{{title}}\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;{{url}}&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;height:30px&quot;</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></code></pre>\n<p>In the example above, Angular evaluates the title and url properties and fills in the blanks, first displaying a bold application title and then a URL.</p>\n","level":1},{"slug":"what-are-template-expressions","title":"What are template expressions?","answer":"<p>A template expression produces a value similar to any Javascript expression. Angular executes the expression and assigns it to a property of a binding target; the target might be an HTML element, a component, or a directive. In the property binding, a template expression appears in quotes to the right of the = symbol as in [property]=&quot;expression&quot;.\nIn interpolation syntax, the template expression is surrounded by double curly braces. For example, in the below interpolation, the template expression is {{username}},</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>{{username}}, welcome to Angular<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></code></pre>\n<p>The below javascript expressions are prohibited in template expression</p>\n<ol>\n<li>assignments (=, +=, -=, ...)</li>\n<li>new</li>\n<li>chaining expressions with ; or ,</li>\n<li>increment and decrement operators (++ and --)</li>\n</ol>\n<hr>\n","level":1},{"slug":"what-are-template-statements","title":"What are template statements?","answer":"<p>A template statement responds to an event raised by a binding target such as an element, component, or directive. The template statements appear in quotes to the right of the = symbol like <strong>(event)=&quot;statement&quot;</strong>.\nLet&#39;s take an example of button click event&#39;s statement</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">&quot;editProfile()&quot;</span>&gt;</span>Edit Profile<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></code></pre>\n<p>In the above expression, editProfile is a template statement. The below JavaScript syntax expressions are not allowed.</p>\n<ol>\n<li>new</li>\n<li>increment and decrement operators, ++ and --</li>\n<li>operator assignment, such as += and -=</li>\n<li>the bitwise operators | and &amp;</li>\n<li>the template expression operators</li>\n</ol>\n<hr>\n","level":1},{"slug":"what-are-pipes","title":"What are pipes?","answer":"<p>A pipe takes in data as input and transforms it to a desired output. For example, let us take a pipe to transform a component&#39;s birthday property into a human-friendly date using <strong>date</strong> pipe.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n@Component({\n<span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">&#x27;app-birthday&#x27;</span>,\n<span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;p&gt;Birthday is {{ birthday | date }}&lt;/p&gt;`</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BirthdayComponent</span> </span>{\nbirthday = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">1987</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">18</span>); <span class=\"hljs-comment\">// June 18, 1987</span>\n}</code></pre>\n","level":1},{"slug":"what-is-a-parameterized-pipe","title":"What is a parameterized pipe?","answer":"<p>A pipe can accept any number of optional parameters to fine-tune its output. The parameterized pipe can be created by declaring the pipe name with a colon ( : ) and then the parameter value. If the pipe accepts multiple parameters, separate the values with colons. Let&#39;s take a birthday example with a particular format(dd/MM/yyyy):</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n@Component({\n<span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">&#x27;app-birthday&#x27;</span>,\n<span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;p&gt;Birthday is {{ birthday | date:&#x27;dd/MM/yyyy&#x27;}}&lt;/p&gt;`</span> <span class=\"hljs-comment\">// 18/06/1987</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BirthdayComponent</span> </span>{\nbirthday = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">1987</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">18</span>);\n}</code></pre>\n<p><strong>Note:</strong> The parameter value can be any valid template expression, such as a string literal or a component property.</p>\n","level":1},{"slug":"how-do-you-chain-pipes","title":"How do you chain pipes?","answer":"<p>You can chain pipes together in potentially useful combinations as per the needs. Let&#39;s take a birthday property which uses date pipe(along with parameter) and uppercase pipes as below</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n@Component({\n<span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">&#x27;app-birthday&#x27;</span>,\n<span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`&lt;p&gt;Birthday is {{  birthday | date:&#x27;fullDate&#x27; | uppercase}} &lt;/p&gt;`</span> <span class=\"hljs-comment\">// THURSDAY, JUNE 18, 1987</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BirthdayComponent</span> </span>{\nbirthday = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">1987</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">18</span>);\n}</code></pre>\n","level":1},{"slug":"what-is-a-custom-pipe","title":"What is a custom pipe?","answer":"<p>Apart from built-inn pipes, you can write your own custom pipe with the below key characteristics,</p>\n<ol>\n<li>A pipe is a class decorated with pipe metadata <strong>@Pipe</strong> decorator, which you import from the core Angular library\nFor example,<pre><code class=\"language-javascript\">@Pipe({<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;myCustomPipe&#x27;</span>})</code></pre>\n</li>\n<li>The pipe class implements the <strong>PipeTransform</strong> interface&#39;s transform method that accepts an input value followed by optional parameters and returns the transformed value.\nThe structure of pipeTransform would be as below,<pre><code class=\"language-javascript\">interface PipeTransform {\ntransform(value: any, ...args: any[]): any\n}</code></pre>\n</li>\n<li>The @Pipe decorator allows you to define the pipe name that you&#39;ll use within template expressions. It must be a valid JavaScript identifier.<pre><code class=\"language-javascript\">template: <span class=\"hljs-string\">`{{someInputValue | myCustomPipe: someOtherValue}}`</span></code></pre>\n</li>\n</ol>\n","level":1},{"slug":"what-is-a-bootstrapping-module","title":"What is a bootstrapping module?","answer":"<p>Every application has at least one Angular module, the root module that you bootstrap to launch the application is called as bootstrapping module. It is commonly known as AppModule. The default structure of AppModule generated by AngularCLI would be as follows,</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">/* JavaScript imports */</span>\n<span class=\"hljs-keyword\">import</span> { BrowserModule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/platform-browser&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { NgModule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { FormsModule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/forms&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { HttpClientModule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/common/http&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { AppComponent } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./app.component&#x27;</span>;\n<span class=\"hljs-comment\">/* the AppModule class with the @NgModule decorator */</span>\n@NgModule({\n<span class=\"hljs-attr\">declarations</span>: [\nAppComponent\n],\n<span class=\"hljs-attr\">imports</span>: [\nBrowserModule,\nFormsModule,\nHttpClientModule\n],\n<span class=\"hljs-attr\">providers</span>: [],\n<span class=\"hljs-attr\">bootstrap</span>: [AppComponent]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppModule</span> </span>{ }</code></pre>\n","level":1},{"slug":"what-are-observables","title":"What are observables?","answer":"<p>Observables are declarative which provide support for passing messages between publishers and subscribers in your application. They are mainly used for event handling, asynchronous programming, and handling multiple values. In this case, you define a function for publishing values, but it is not executed until a consumer subscribes to it. The subscribed consumer then receives notifications until the function completes, or until they unsubscribe.</p>\n","level":1},{"slug":"what-is-httpclient-and-its-benefits","title":"What is HttpClient and its benefits?","answer":"<p>Most of the Front-end applications communicate with backend services over HTTP protocol using either XMLHttpRequest interface or the fetch() API. Angular provides a simplified client HTTP API known as <strong>HttpClient</strong> which is based on top of XMLHttpRequest interface. This client is avaialble from <code>@angular/common/http</code> package.\nYou can import in your root module as below,</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> { HttpClientModule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/common/http&#x27;</span>;</code></pre>\n<p>The major advantages of HttpClient can be listed as below,</p>\n<ol>\n<li>Contains testability features</li>\n<li>Provides typed request and response objects</li>\n<li>Intercept request and response</li>\n<li>Supports Observalbe APIs</li>\n<li>Supports streamlined error handling</li>\n</ol>\n","level":1},{"slug":"what-is-rxjs","title":"What is RxJS?","answer":"<p>RxJS is a library for composing asynchronous and callback-based code in a functional, reactive style using Observables. Many APIs such as  HttpClient produce and consume RxJS Observables and also uses operators for processing observables.\nFor example, you can import observables and operators for using HttpClient as below,</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> { Observable, throwError } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;rxjs&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { catchError, retry } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;rxjs/operators&#x27;</span>;</code></pre>\n","level":1},{"slug":"what-is-subscribing","title":"What is subscribing?","answer":"<p>An Observable instance begins publishing values only when someone subscribes to it. So you need to subscribe by calling the <strong>subscribe()</strong> method of the instance, passing an observer object to receive the notifications.\nLet&#39;s take an example of creating and subscribing to a simple observable, with an observer that logs the received message to the console.</p>\n<pre><code class=\"language-javascript\">Creates an observable sequence <span class=\"hljs-keyword\">of</span> <span class=\"hljs-number\">5</span> integers, starting <span class=\"hljs-keyword\">from</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">const</span> source = range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>);\n<span class=\"hljs-comment\">// Create observer object</span>\n<span class=\"hljs-keyword\">const</span> myObserver = {\n<span class=\"hljs-attr\">next</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Observer got a next value: &#x27;</span> + x),\n<span class=\"hljs-attr\">error</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">&#x27;Observer got an error: &#x27;</span> + err),\n<span class=\"hljs-attr\">complete</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Observer got a complete notification&#x27;</span>),\n};\n<span class=\"hljs-comment\">// Execute with the observer object and Prints out each item</span>\nsource.subscribe(myObserver);\n<span class=\"hljs-comment\">// =&gt; Observer got a next value: 1</span>\n<span class=\"hljs-comment\">// =&gt; Observer got a next value: 2</span>\n<span class=\"hljs-comment\">// =&gt; Observer got a next value: 3</span>\n<span class=\"hljs-comment\">// =&gt; Observer got a next value: 4</span>\n<span class=\"hljs-comment\">// =&gt; Observer got a next value: 5</span>\n<span class=\"hljs-comment\">// =&gt; Observer got a complete notification</span></code></pre>\n","level":1},{"slug":"what-is-an-observable","title":"What is an observable?","answer":"<p>An Observable is a unique Object similar to a Promise that can help manage async code. Observables are not part of the JavaScript language so we need to rely on a popular Observable library called RxJS.\nThe observables are created using new keyword.\nLet see the simple example of observable,</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> { Observable } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;rxjs&#x27;</span>;\n<span class=\"hljs-keyword\">const</span> observable = <span class=\"hljs-keyword\">new</span> Observable(<span class=\"hljs-function\"><span class=\"hljs-params\">observer</span> =&gt;</span> {\n<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\nobserver.next(<span class=\"hljs-string\">&#x27;Hello from a Observable!&#x27;</span>);\n}, <span class=\"hljs-number\">2000</span>);\n});</code></pre>\n","level":1},{"slug":"what-is-an-observer","title":"What is an observer?","answer":"<p>Observer is an interface for a consumer of push-based notifications delivered by an Observable. It has below structure,</p>\n<pre><code class=\"language-javascript\">interface Observer&lt;T&gt; {\nclosed?: boolean;\nnext: <span class=\"hljs-function\">(<span class=\"hljs-params\">value: T</span>) =&gt;</span> <span class=\"hljs-keyword\">void</span>;\nerror: <span class=\"hljs-function\">(<span class=\"hljs-params\">err: any</span>) =&gt;</span> <span class=\"hljs-keyword\">void</span>;\ncomplete: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-keyword\">void</span>;\n}</code></pre>\n<p>A handler that implements the Observer interface for receiving observable notifications will be passed as a parameter for observable as below,</p>\n<pre><code class=\"language-javascript\">myObservable.subscribe(myObserver);</code></pre>\n<p><strong>Note:</strong> If you don&#39;t supply a handler for a notification type, the observer ignores notifications of that type.</p>\n","level":1},{"slug":"what-are-angular-elements","title":"What are angular elements?","answer":"<p>Angular elements are Angular components packaged as <strong>custom elements</strong>(a web standard for defining new HTML elements in a framework-agnostic way). Angular Elements hosts an Angular component, providing a bridge between the data and logic defined in the component and standard DOM APIs, thus, providing a way to use Angular components in <code>non-Angular environments</code>.</p>\n","level":1},{"slug":"what-is-the-purpose-of-base-href-tag","title":"What is the purpose of base href tag?","answer":"<p>The routing application should add <base> element to the index.html as the first child in the <head> tag in order to indicate how to compose navigation URLs. If app folder is the application root then you can set the href value as below</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">base</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span></code></pre>\n","level":1},{"slug":"what-are-the-router-imports","title":"What are the router imports?","answer":"<p>The Angular Router which represents a particular component view for a given URL is not part of Angular Core. It is available in library named <code>@angular/router</code> to import required router components. For example, we import them in app module as below,</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">import</span> { RouterModule, Routes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/router&#x27;</span>;</code></pre>\n","level":1},{"slug":"what-is-router-outlet","title":"What is router outlet?","answer":"<p>The RouterOutlet is a directive from the router library and it  acts as a placeholder that marks the spot in the template where the router should display the components for that outlet. Router outlet is used like a component,</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-outlet</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-outlet</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Routed components go here --&gt;</span></code></pre>\n","level":1},{"slug":"what-are-router-links","title":"What are router links?","answer":"<p>The RouterLink is a directive on the anchor tags give the router control over those elements. Since the navigation paths are fixed, you can assign string values to router-link directive as below,</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Angular Router<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nav</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">routerLink</span>=<span class=\"hljs-string\">&quot;/todosList&quot;</span> &gt;</span>List of todos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">routerLink</span>=<span class=\"hljs-string\">&quot;/completed&quot;</span> &gt;</span>Completed todos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nav</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-outlet</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-outlet</span>&gt;</span></code></pre>\n","level":1},{"slug":"what-are-active-router-links","title":"What are active router links?","answer":"<p>RouterLinkActive is a directive that toggles css classes for active RouterLink bindings based on the current RouterState. i.e, the Router will add CSS classes when this link is active and and remove when the link is inactive. For example, you can add them to RouterLinks as below</p>\n<pre><code class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Angular Router<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nav</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">routerLink</span>=<span class=\"hljs-string\">&quot;/todosList&quot;</span> <span class=\"hljs-attr\">routerLinkActive</span>=<span class=\"hljs-string\">&quot;active&quot;</span>&gt;</span>List of todos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">routerLink</span>=<span class=\"hljs-string\">&quot;/completed&quot;</span> <span class=\"hljs-attr\">routerLinkActive</span>=<span class=\"hljs-string\">&quot;active&quot;</span>&gt;</span>Completed todos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nav</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-outlet</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-outlet</span>&gt;</span></code></pre>\n","level":1},{"slug":"what-is-router-state","title":"What is router state?","answer":"<p>RouterState is a tree of activated routes. Every node in this tree knows about the &quot;consumed&quot; URL segments, the extracted parameters, and the resolved data. You can access the current RouterState from anywhere in the application using the <code>Router service</code> and the <code>routerState</code> property.</p>\n<pre><code class=\"language-javascript\">@Component({<span class=\"hljs-attr\">templateUrl</span>:<span class=\"hljs-string\">&#x27;template.html&#x27;</span>})\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyComponent</span> </span>{\n<span class=\"hljs-function\"><span class=\"hljs-title\">  constructor</span>(<span class=\"hljs-params\">router: Router</span>)</span> {\n<span class=\"hljs-keyword\">    const</span> state: RouterState = router.routerState;\n<span class=\"hljs-keyword\">    const</span> root: ActivatedRoute = state.root;\n<span class=\"hljs-keyword\">    const</span> child = root.firstChild;\n<span class=\"hljs-keyword\">    const</span> id: Observable&lt;string&gt; = child.params.map(<span class=\"hljs-function\"><span class=\"hljs-params\">p</span> =&gt;</span> p.id);\n<span class=\"hljs-comment\">    //...</span>\n  }\n}</code></pre>\n","level":1},{"slug":"what-are-router-events","title":"What are router events?","answer":"<p>During each navigation, the Router emits navigation events through the Router.events property allowing you to track the lifecycle of the route.\nThe sequence of router events is as below,</p>\n<ol>\n<li>NavigationStart,</li>\n<li>RouteConfigLoadStart,</li>\n<li>RouteConfigLoadEnd,</li>\n<li>RoutesRecognized,</li>\n<li>GuardsCheckStart,</li>\n<li>ChildActivationStart,</li>\n<li>ActivationStart,</li>\n<li>GuardsCheckEnd,</li>\n<li>ResolveStart,</li>\n<li>ResolveEnd,</li>\n<li>ActivationEnd</li>\n<li>ChildActivationEnd</li>\n<li>NavigationEnd,</li>\n<li>NavigationCancel,</li>\n<li>NavigationError</li>\n<li>Scroll</li>\n</ol>\n","level":1},{"slug":"what-is-activated-route","title":"What is activated route?","answer":"<p>ActivatedRoute contains the information about a route associated with a component loaded in an outlet. It can also be used to traverse the router state tree. The ActivatedRoute will be injected as a router service to access the information. In the below example, you can access route path and parameters,</p>\n<pre><code class=\"language-javascript\">@Component({...})\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyComponent</span> </span>{\n<span class=\"hljs-function\"><span class=\"hljs-title\">  constructor</span>(<span class=\"hljs-params\">route: ActivatedRoute</span>)</span> {\n<span class=\"hljs-keyword\">    const</span> id: Observable&lt;string&gt; = route.params.pipe(map(<span class=\"hljs-function\"><span class=\"hljs-params\">p</span> =&gt;</span> p.id));\n<span class=\"hljs-keyword\">    const</span> url: Observable&lt;string&gt; = route.url.pipe(map(<span class=\"hljs-function\"><span class=\"hljs-params\">segments</span> =&gt;</span> segments.join(<span class=\"hljs-string\">&#x27;&#x27;</span>)));\n<span class=\"hljs-comment\">    // route.data includes both `data` and `resolve`</span>\n<span class=\"hljs-keyword\">    const</span> user = route.data.pipe(map(<span class=\"hljs-function\"><span class=\"hljs-params\">d</span> =&gt;</span> d.user));\n  }\n}</code></pre>\n","level":1},{"slug":"what-is-the-purpose-of-wildcard-route","title":"What is the purpose of Wildcard route?","answer":"<p>If the URL doesn&#39;t match any predefined routes then it causes the router to throw an error and crash the app. In this case, you can use wildcard route. A wildcard route has a path consisting of two asterisks to match every URL.\nFor example, you can define PageNotFoundComponent for wildcard route as below</p>\n<pre><code class=\"language-javascript\">{ <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&#x27;**&#x27;</span>, <span class=\"hljs-attr\">component</span>: PageNotFoundComponent }</code></pre>\n","level":1},{"slug":"do-i-need-a-routing-module-always","title":"Do I need a Routing Module always?","answer":"<p>No, the Routing Module is a design choice. You can skip routing Module (for example, AppRoutingModule) when the configuration is simple and merge the routing configuration directly into the companion module (for example, AppModule). But it is recommended when the configuration is complex and includes specialized guard and resolver services.</p>\n","level":1},{"slug":"what-is-type-narrowing","title":"What is type narrowing?","answer":"<p>The expression used in an ngIf directive is used to narrow type unions in the Angular template compiler similar to if expression in typescript. So *ngIf allows the typeScript compiler to infer that the data used in the binding expression will never be undefined.</p>\n<pre><code class=\"language-javascript\">@Component({\n<span class=\"hljs-attr\">  selector</span>: <span class=\"hljs-string\">&#x27;my-component&#x27;</span>,\n<span class=\"hljs-attr\">  template</span>: <span class=\"hljs-string\">&#x27;&lt;span *ngIf=&quot;user&quot;&gt; {{user.contact.email}} &lt;/span&gt;&#x27;</span>\n})\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyComponent</span> </span>{\n  user?: User;\n}</code></pre>\n","level":1},{"slug":"how-do-you-describe-various-dependencies-in-angular-application","title":"How do you describe various dependencies in angular application?","answer":"<p>The dependencies section of package.json with in an angular application can be divided as follow,</p>\n<ol>\n<li><strong>Angular packages:</strong> Angular core and optional modules; their package names begin @angular/.</li>\n<li><strong>Support packages:</strong> Third-party libraries that must be present for Angular apps to run.</li>\n<li><strong>Polyfill packages:</strong> Polyfills plug gaps in a browser&#39;s JavaScript implementation.</li>\n</ol>\n","level":1},{"slug":"what-is-zone","title":"What is zone?","answer":"<p>A Zone is an execution context that persists across async tasks. Angular relies on zone.js to run Angular&#39;s change detection processes when native JavaScript operations raise events</p>\n","level":1},{"slug":"what-is-the-purpose-of-common-module","title":"What is the purpose of common module?","answer":"<p>The commonly-needed services, pipes, and directives provided by @angular/common module. Apart from these HttpClientModule is available under @angular/common/http.</p>\n","level":1},{"slug":"what-are-the-class-decorators-in-angular","title":"What are the class decorators in Angular?","answer":"<p>  A class decorator is a decorator that appears immediately before a class definition, which declares the class to be of the given type, and provides metadata suitable to the type\nThe following list of decorators comes under class decorators,</p>\n<ol>\n<li>@Component()</li>\n<li>@Directive()</li>\n<li>@Pipe()</li>\n<li>@Injectable()</li>\n<li>@NgModule()</li>\n</ol>\n","level":1},{"slug":"what-are-class-field-decorators","title":"What are class field decorators?","answer":"<p>  The class field decorators are the statements declared immediately before a field in a class definition that defines the type of that field. Some of the examples are: @input and @output,</p>\n<pre><code class=\"language-javascript\">@Input() myProperty;\n@Output() myEvent = <span class=\"hljs-keyword\">new</span> EventEmitter();</code></pre>\n","level":1},{"slug":"what-is-declarable-in-angular","title":"What is declarable in Angular?","answer":"<p>  Declarable is a class type that you can add to the declarations list of an NgModule. The class types such as components, directives, and pipes comes can be declared in the module. The structure of declarations would be,</p>\n<pre><code class=\"language-javascript\">declarations: [\nYourComponent,\nYourPipe,\nYourDirective\n],</code></pre>\n","level":1},{"slug":"what-are-the-restrictions-on-declarable-classes","title":"What are the restrictions on declarable classes?","answer":"<p>  Below classes shouldn&#39;t be declared,</p>\n<ol>\n<li>A class that&#39;s already declared in another NgModule</li>\n<li>Ngmodule classes</li>\n<li>Service classes</li>\n<li>Helper classes</li>\n</ol>\n","level":1},{"slug":"what-is-an-rxjs-Subject","title":"What is an rxjs Subject?","answer":"<p> An RxJS Subject is a special type of Observable that allows values to be multicasted to many Observers. While plain Observables are unicast (each subscribed Observer owns an independent execution of the Observable), Subjects are multicast.\nA Subject is like an Observable, but can multicast to many Observers. Subjects are like EventEmitters: they maintain a registry of many listeners.</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-keyword\">import</span> { Subject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;rxjs&#x27;</span>;\n<span class=\"hljs-keyword\">const</span> subject = <span class=\"hljs-keyword\">new</span> Subject&lt;<span class=\"hljs-built_in\">number</span>&gt;();\nsubject.subscribe({\n<span class=\"hljs-attr\">next</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`observerA: <span class=\"hljs-subst\">${v}</span>`</span>)\n});\nsubject.subscribe({\n<span class=\"hljs-attr\">next</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`observerB: <span class=\"hljs-subst\">${v}</span>`</span>)\n});\nsubject.next(<span class=\"hljs-number\">1</span>);\nsubject.next(<span class=\"hljs-number\">2</span>);</code></pre>\n","level":1},{"slug":"what-is-platform-in-angular","title":"What is platform in Angular?","answer":"<p> A platform is the context in which an Angular application runs. The most common platform for Angular applications is a web browser, but it can also be an operating system for a mobile device, or a web server. The runtime-platform is provided by the @angular/platform-* packages and these packages allow applications that make use of <code>@angular/core</code> and <code>@angular/common</code> to execute in different environments.\ni.e, Angular can be used as platform-independent framework in different environments, For example,</p>\n<ol>\n<li>While running in the browser, it uses <code>platform-browser</code> package.</li>\n<li>When SSR(server-side rendering ) is used, it uses <code>platform-server</code> package for providing web server implementation.</li>\n</ol>\n","level":1},{"slug":"what-is-angular-material","title":"What is Angular Material?","answer":"<p> Angular Material is a collection of Material Design components for Angular framework following the Material Design spec. You can apply Material Design very easily using Angular Material.<p>It supports the most recent two versions of all major browsers. The latest version of Angular material is 8.1.1</p>\n","level":1},{"slug":"what-is-host-property-in-css","title":"What is host property in css?","answer":"<p> The <code>:host</code> pseudo-class selector is used to target styles in the element that hosts the component. Since the host element is in a parent component&#39;s template, you can&#39;t reach the host element from inside the component by other means.\nFor example, you can create a border for parent element as below,</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">//Other styles for app.component.css</span>\n<span class=\"hljs-comment\">//...</span>\n:host {\n<span class=\"hljs-attr\">display</span>: block;\nborder: <span class=\"hljs-number\">1</span>px solid black;\npadding: <span class=\"hljs-number\">20</span>px;\n}</code></pre>\n","level":1}],"tabs":[{"label":"Junior","slug":"junior","link":"/topics/angular/1"},{"label":"Middle","slug":"middle","link":"/topics/angular/2"},{"label":"Senior","slug":"senior","link":"/topics/angular/3"}],"title":"Questions","topic":{"image":"/img/topics/angular.svg","slug":"angular","label":"Angular"}},"__N_SSG":true}