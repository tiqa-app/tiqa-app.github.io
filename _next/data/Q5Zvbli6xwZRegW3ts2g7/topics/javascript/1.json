{"pageProps":{"activeTab":"junior","back":"/topics","questions":[{"slug":"what-is-a-prototype-chain","title":"What is prototype chain?","answer":"<p><strong>Prototype chaining</strong> is used to build new types of objects based on existing ones. It is similar to inheritance in a class based language. The prototype on object instance is available through <strong>Object.getPrototypeOf(object)</strong> or <strong>proto</strong> property whereas prototype on constructors function is available through object.prototype.</p>","level":1},{"slug":"what-is-json-and-its-common-operations","title":"What is JSON and its common operations?","answer":"<p><strong>JSON</strong> is a text-based data format following JavaScript object syntax, which was popularized by <code>Douglas Crockford</code>. It is useful when you want to transmit data across a network and it is basically just a text file with an extension of .json, and a MIME type of application/json\n<strong>Parsing:</strong> Converting a string to a native object</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-built_in\">JSON</span>.parse(text);</code></pre>\n<p>Stringification: **converting a native object to a string so it can be transmitted across the network</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-built_in\">JSON</span>.stringify(object);</code></pre>","level":1},{"slug":"what-is-the-purpose-of-array-slice-method","title":"What is the purpose of array slice method?","answer":"<p>The <strong>slice()</strong> method returns the selected elements in an array as a new array object. It selects the elements starting at the given start argument, and ends at the given optional end argument without including the last element. If you omit the second argument then it selects till the end. Some of the examples of this method are,</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">let</span> arrayIntegers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-keyword\">let</span> arrayIntegers1 = arrayIntegers.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// returns [1,2]</span>\n<span class=\"hljs-keyword\">let</span> arrayIntegers2 = arrayIntegers.slice(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// returns [3]</span>\n<span class=\"hljs-keyword\">let</span> arrayIntegers3 = arrayIntegers.slice(<span class=\"hljs-number\">4</span>); <span class=\"hljs-comment\">//returns [5]</span></code></pre>\n<p><strong>Note:</strong> Slice method won&#39;t mutate the original array but it returns the subset as a new array.</p>\n","level":1},{"slug":"what-is-the-purpose-of-array-splice-method","title":"What is the purpose of array splice method?","answer":"<p>The <strong>splice()</strong> method is used either adds/removes items to/from an array, and then returns the removed item. The first argument specifies the array position for insertion or deletion whereas the option second argument indicates the number of elements to be deleted. Each additional argument is added to the array. Some of the examples of this method are,</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">let</span> arrayIntegersOriginal1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-keyword\">let</span> arrayIntegersOriginal2 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-keyword\">let</span> arrayIntegersOriginal3 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n\n<span class=\"hljs-keyword\">let</span> arrayIntegers1 = arrayIntegersOriginal1.splice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// returns [1, 2]; original array: [3, 4, 5]</span>\n<span class=\"hljs-keyword\">let</span> arrayIntegers2 = arrayIntegersOriginal2.splice(<span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// returns [4, 5]; original array: [1, 2, 3]</span>\n<span class=\"hljs-keyword\">let</span> arrayIntegers3 = arrayIntegersOriginal3.splice(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>); <span class=\"hljs-comment\">//returns [4]; original array: [1, 2, 3, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 5]</span></code></pre>\n<p><strong>Note:</strong> Splice method modifies the original array and returns the deleted array.</p>\n","level":1},{"slug":"what-is-the-difference-between-slice-and-splice","title":"What is the difference between slice and splice?","answer":"<p>Some of the major difference in a tabular form</p>\n<table>\n<thead>\n<tr>\n<th>Slice</th>\n<th>Splice</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Doesn&#39;t modify the original array(immutable)</td>\n<td>Modifies the original array(mutable)</td>\n</tr>\n<tr>\n<td>Returns the subset of original array</td>\n<td>Returns the deleted elements as array</td>\n</tr>\n<tr>\n<td>Used to pick the elements from array</td>\n<td>Used to insert or delete elements to/from array</td>\n</tr>\n</tbody></table>","level":1},{"slug":"how-do-you-compare-object-and-map","title":"How do you compare Object and Map?","answer":"<p><strong>Objects</strong> are similar to <strong>Maps</strong> in that both let you set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. Due to this reason, Objects have been used as Maps historically. But there are important differences that make using a Map preferable in certain cases.</p>\n<ol>\n<li>The keys of an Object are Strings and Symbols, whereas they can be any value for a Map, including functions, objects, and any primitive.</li>\n<li>The keys in Map are ordered while keys added to Object are not. Thus, when iterating over it, a Map object returns keys in order of insertion.</li>\n<li>You can get the size of a Map easily with the size property, while the number of properties in an Object must be determined manually.</li>\n<li>A Map is an iterable and can thus be directly iterated, whereas iterating over an Object requires obtaining its keys in some fashion and iterating over them.</li>\n<li>An Object has a prototype, so there are default keys in the map that could collide with your keys if you&#39;re not careful. As of ES5 this can be bypassed by using map = Object.create(null), but this is seldom done.</li>\n<li>A Map may perform better in scenarios involving frequent addition and removal of key pairs.</li></ol>","level":1},{"slug":"what-is-the-difference-between-==-and-===-operators","title":"What is the difference between == and === operators?","answer":"<p>JavaScript provides both strict(===, !==) and type-converting(==, !=) equality comparison. The strict operators take type of variable in consideration, while non-strict operators make type correction/conversion based upon values of variables. The strict operators follow the below conditions for different types,</p>\n<ol>\n<li>Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions.</li>\n<li>Two numbers are strictly equal when they are numerically equal. i.e, Having the same number value.\nThere are two special cases in this,<ol>\n<li>NaN is not equal to anything, including NaN.</li>\n<li>Positive and negative zeros are equal to one another.</li>\n</ol>\n</li>\n<li>Two Boolean operands are strictly equal if both are true or both are false.</li>\n<li>Two objects are strictly equal if they refer to the same Object.</li>\n<li>Null and Undefined types are not equal with ===, but equal with ==. i.e,\nnull===undefined --&gt; false but null==undefined --&gt; true</li>\n</ol>\n<p>Some of the example which covers the above cases,</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-number\">0</span> == <span class=\"hljs-literal\">false</span>   <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-number\">0</span> === <span class=\"hljs-literal\">false</span>  <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-number\">1</span> == <span class=\"hljs-string\">&quot;1&quot;</span>     <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-number\">1</span> === <span class=\"hljs-string\">&quot;1&quot;</span>    <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-literal\">null</span> == <span class=\"hljs-literal\">undefined</span> <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-literal\">null</span> === <span class=\"hljs-literal\">undefined</span> <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-string\">&#x27;0&#x27;</span> == <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-string\">&#x27;0&#x27;</span> === <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// false</span>\n[]==[] or []===[] <span class=\"hljs-comment\">//false, refer different objects in memory</span>\n{}=={} or {}==={} <span class=\"hljs-comment\">//false, refer different objects in memory</span></code></pre>","level":1},{"slug":"what-are-lambda-or-arrow-functions","title":"What are lambda or arrow functions","answer":"<p>An arrow function is a shorter syntax for a function expression and does not have its own <strong>this, arguments, super, or new.target</strong>. These functions are best suited for non-method functions, and they cannot be used as constructors.</p>","level":1}],"tabs":[{"label":"Junior","slug":"junior","link":"/topics/javascript/1"},{"label":"Middle","slug":"middle","link":"/topics/javascript/2"},{"label":"Senior","slug":"senior","link":"/topics/javascript/3"}],"title":"Questions","topic":{"id":"","image":"/img/topics/javascript.svg","slug":"javascript","label":"JavaScript"}},"__N_SSG":true}